#!/usr/bin/env python3
"""
Script ki·ªÉm tra k·∫øt n·ªëi database v√† li·ªát k√™ c√°c n√∫t giao c√≥ s·∫µn
"""

import os
import psycopg2
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_database_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi database"""
    try:
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            print("‚ùå ERROR: DATABASE_URL kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong file .env")
            return False
            
        print(f"üîó ƒêang k·∫øt n·ªëi t·ªõi database...")
        conn = psycopg2.connect(
            database_url,
            sslmode="require"
        )
        cursor = conn.cursor()
        
        print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
        return conn, cursor
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False

def list_junctions(conn, cursor):
    """Li·ªát k√™ t·∫•t c·∫£ n√∫t giao"""
    try:
        query = """
        SELECT "junctionId", "junctionName", "location"
        FROM "Junction"
        ORDER BY "junctionName"
        """
        cursor.execute(query)
        results = cursor.fetchall()
        
        if results:
            print(f"\nüìç T√¨m th·∫•y {len(results)} n√∫t giao:")
            print("-" * 60)
            for i, (junction_id, name, location) in enumerate(results, 1):
                print(f"{i:2}. {name}")
                print(f"     V·ªã tr√≠: {location}")
                print(f"     ID: {junction_id}")
                print()
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t giao n√†o trong database")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch n√∫t giao: {e}")

def check_schedules(conn, cursor):
    """Ki·ªÉm tra schedule configs"""
    try:
        query = """
        SELECT j."junctionName", sc."scheduleName", sc."mode", sc."isActive"
        FROM "ScheduleConfig" sc
        JOIN "Junction" j ON sc."junctionId" = j."junctionId"
        ORDER BY j."junctionName", sc."isActive" DESC
        """
        cursor.execute(query)
        results = cursor.fetchall()
        
        if results:
            print(f"\n‚è∞ T√¨m th·∫•y {len(results)} schedule configs:")
            print("-" * 60)
            current_junction = None
            for junction_name, schedule_name, mode, is_active in results:
                if junction_name != current_junction:
                    print(f"\nüö¶ {junction_name}:")
                    current_junction = junction_name
                
                status = "üü¢ ACTIVE" if is_active else "üî¥ Inactive"
                mode_text = "T·ª± ƒë·ªông" if mode == "auto" else "Theo l·ªãch"
                print(f"   - {schedule_name} ({mode_text}) - {status}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y schedule config n√†o")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra schedules: {e}")

def check_traffic_patterns(conn, cursor):
    """Ki·ªÉm tra traffic patterns v·ªõi th√¥ng tin chi ti·∫øt v·ªÅ timing configuration"""
    try:
        query = """
        SELECT j."junctionName", tp."patternName", tp."patternId",
               tp."timingConfiguration"
        FROM "TrafficPattern" tp
        JOIN "Junction" j ON tp."junctionId" = j."junctionId"
        ORDER BY j."junctionName", tp."patternName"
        """
        cursor.execute(query)
        results = cursor.fetchall()
        
        if results:
            print(f"\nüéØ T√¨m th·∫•y {len(results)} traffic patterns:")
            print("-" * 80)
            current_junction = None
            for junction_name, pattern_name, pattern_id, timing_config in results:
                if junction_name != current_junction:
                    print(f"\nüö¶ {junction_name}:")
                    current_junction = junction_name
                
                print(f"\n   üìã Pattern: {pattern_name}")
                print(f"      ID: {pattern_id}")
                
                # Ph√¢n t√≠ch timing configuration
                if timing_config:
                    if "cycleDuration" in timing_config:
                        # ƒê·ªãnh d·∫°ng m·ªõi
                        cycle_time = timing_config.get("cycleDuration", "N/A")
                        yellow_time = timing_config.get("yellowTime", "N/A")
                        all_red_time = timing_config.get("allRedTime", "N/A")
                        print(f"      ‚è±Ô∏è  Chu k·ª≥: {cycle_time}s (ƒê·ªãnh d·∫°ng m·ªõi)")
                        print(f"      üü° V√†ng: {yellow_time}s, üî¥ ƒê·ªè chung: {all_red_time}s")
                        
                        phases = timing_config.get("phases", [])
                        if phases:
                            print(f"      üìä Phases ({len(phases)}):")
                            for i, phase in enumerate(phases):
                                phase_name = phase.get("phaseName", f"Phase {i+1}")
                                start_time = phase.get("startTime", 0)
                                duration = phase.get("duration", 0)
                                is_active = phase.get("isActive", True)
                                status = "üü¢ Active" if is_active else "üî¥ Inactive"
                                print(f"         {i+1}. {phase_name}: {start_time}s-{start_time+duration}s ({duration}s) - {status}")
                                
                                # Hi·ªÉn th·ªã light states
                                light_states = phase.get("lightStates", {})
                                if light_states:
                                    states_str = ", ".join([f"{lid}: {state}" for lid, state in light_states.items()])
                                    print(f"            Light States: {states_str}")
                    
                    elif "cycleTime" in timing_config:
                        # ƒê·ªãnh d·∫°ng c≈©
                        cycle_time = timing_config.get("cycleTime", "N/A")
                        yellow_time = timing_config.get("yellowTime", "N/A")
                        all_red_time = timing_config.get("allRedTime", "N/A")
                        print(f"      ‚è±Ô∏è  Chu k·ª≥: {cycle_time}s (ƒê·ªãnh d·∫°ng c≈©)")
                        print(f"      üü° V√†ng: {yellow_time}s, üî¥ ƒê·ªè chung: {all_red_time}s")
                        
                        phases = timing_config.get("phases", [])
                        if phases:
                            print(f"      üìä Phases ({len(phases)}):")
                            for i, phase in enumerate(phases):
                                direction = phase.get("direction", f"Direction {i+1}")
                                start_time = phase.get("startTime", 0)
                                green_time = phase.get("greenTime", 0)
                                print(f"         {i+1}. {direction}: Start {start_time}s, Green {green_time}s")
                    else:
                        print(f"      ‚ùì ƒê·ªãnh d·∫°ng timing configuration kh√¥ng x√°c ƒë·ªãnh")
                        print(f"         Keys: {list(timing_config.keys())}")
                else:
                    print(f"      ‚ùå Kh√¥ng c√≥ timing configuration")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y traffic pattern n√†o")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra traffic patterns: {e}")

def check_traffic_lights(conn, cursor):
    """Ki·ªÉm tra traffic lights c·ªßa c√°c junction"""
    try:
        query = """
        SELECT j."junctionName", tl."trafficLightId", tl."location", tl."direction"
        FROM "TrafficLight" tl
        JOIN "Junction" j ON tl."junctionId" = j."junctionId"
        ORDER BY j."junctionName", tl."direction"
        """
        cursor.execute(query)
        results = cursor.fetchall()
        
        if results:
            print(f"\nüö• T√¨m th·∫•y {len(results)} traffic lights:")
            print("-" * 60)
            current_junction = None
            for junction_name, light_id, location, direction in results:
                if junction_name != current_junction:
                    print(f"\nüö¶ {junction_name}:")
                    current_junction = junction_name
                
                print(f"   üö• {direction}: {location}")
                print(f"      ID: {light_id}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y traffic light n√†o")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra traffic lights: {e}")

def test_phase_mapping(conn, cursor, junction_name=None):
    """Test mapping phases v·ªõi directions cho m·ªôt junction c·ª• th·ªÉ"""
    try:
        if not junction_name:
            print("\n‚ö†Ô∏è  Vui l√≤ng ch·ªçn junction ƒë·ªÉ test mapping:")
            # L·∫•y danh s√°ch junctions
            cursor.execute('SELECT "junctionName" FROM "Junction" ORDER BY "junctionName"')
            junctions = cursor.fetchall()
            for i, (name,) in enumerate(junctions, 1):
                print(f"{i}. {name}")
            
            try:
                choice = int(input("Ch·ªçn s·ªë: ")) - 1
                if 0 <= choice < len(junctions):
                    junction_name = junctions[choice][0]
                else:
                    print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                    return
            except ValueError:
                print("Vui l√≤ng nh·∫≠p s·ªë")
                return
        
        print(f"\nüîç Test mapping phases cho junction: {junction_name}")
        print("-" * 60)
        
        # L·∫•y junction ID
        cursor.execute('SELECT "junctionId" FROM "Junction" WHERE "junctionName" = %s', (junction_name,))
        result = cursor.fetchone()
        if not result:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y junction: {junction_name}")
            return
        
        junction_id = result[0]
        
        # L·∫•y traffic lights
        cursor.execute("""
            SELECT "trafficLightId", "direction", "location"
            FROM "TrafficLight"
            WHERE "junctionId" = %s
            ORDER BY "direction"
        """, (junction_id,))
        traffic_lights = cursor.fetchall()
        
        print(f"üö• Traffic Lights:")
        light_direction_map = {}
        for light_id, direction, location in traffic_lights:
            light_direction_map[light_id] = direction
            print(f"   {direction}: {location} (ID: {light_id})")
        
        # L·∫•y active schedule
        cursor.execute("""
            SELECT "scheduleName", "mode", "autoPatternId"
            FROM "ScheduleConfig"
            WHERE "junctionId" = %s AND "isActive" = true
            LIMIT 1
        """, (junction_id,))
        schedule_result = cursor.fetchone()
        
        if not schedule_result:
            print("‚ùå Kh√¥ng c√≥ active schedule")
            return
        
        schedule_name, mode, auto_pattern_id = schedule_result
        print(f"\nüìÖ Active Schedule: {schedule_name} (Mode: {mode})")
        
        if mode == "auto" and auto_pattern_id:
            # L·∫•y pattern t·ª´ autoPatternId
            cursor.execute("""
                SELECT "patternName", "timingConfiguration"
                FROM "TrafficPattern"
                WHERE "patternId" = %s
            """, (auto_pattern_id,))
            pattern_result = cursor.fetchone()
            
            if pattern_result:
                pattern_name, timing_config = pattern_result
                print(f"üéØ Auto Pattern: {pattern_name}")
                
                # Test mapping
                if "cycleDuration" in timing_config:
                    print(f"\nüîÑ Phase Mapping Test (ƒê·ªãnh d·∫°ng m·ªõi):")
                    phases = timing_config.get("phases", [])
                    
                    for i, phase in enumerate(phases):
                        if not phase.get("isActive", True):
                            continue
                            
                        phase_name = phase.get("phaseName", f"Phase {i+1}")
                        start_time = phase.get("startTime", 0)
                        duration = phase.get("duration", 0)
                        light_states = phase.get("lightStates", {})
                        
                        print(f"\n   Phase {i+1}: {phase_name}")
                        print(f"   Time: {start_time}s - {start_time + duration}s ({duration}s)")
                        
                        # T√¨m direction t·ª´ light states
                        mapped_direction = None
                        for light_id, state in light_states.items():
                            if state == "green" and light_id in light_direction_map:
                                mapped_direction = light_direction_map[light_id]
                                print(f"   ‚úÖ Mapped direction: {mapped_direction} (t·ª´ light {light_id})")
                                break
                        
                        if not mapped_direction:
                            # Th·ª≠ t·ª´ phase name
                            for direction in ["B·∫Øc", "Nam", "ƒê√¥ng", "T√¢y"]:
                                if direction in phase_name:
                                    mapped_direction = direction
                                    print(f"   ‚ö†Ô∏è  Mapped direction: {mapped_direction} (t·ª´ phase name)")
                                    break
                        
                        if not mapped_direction:
                            print(f"   ‚ùå Kh√¥ng th·ªÉ map direction")
                        
                        print(f"   Light States: {light_states}")
                
                elif "cycleTime" in timing_config:
                    print(f"\nüîÑ Phase Mapping Test (ƒê·ªãnh d·∫°ng c≈©):")
                    phases = timing_config.get("phases", [])
                    
                    for i, phase in enumerate(phases):
                        direction = phase.get("direction", "Unknown")
                        start_time = phase.get("startTime", 0)
                        green_time = phase.get("greenTime", 0)
                        
                        print(f"   Phase {i+1}: {direction}")
                        print(f"   Time: Start {start_time}s, Green {green_time}s")
                        print(f"   ‚úÖ Direction already mapped: {direction}")
                
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y auto pattern")
        else:
            print("‚ö†Ô∏è  Schedule mode kh√¥ng ph·∫£i 'auto' ho·∫∑c kh√¥ng c√≥ autoPatternId")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi test mapping: {e}")

def main():
    print("=" * 60)
    print("TEST K·∫æT N·ªêI DATABASE V√Ä DANH S√ÅCH N√öT GIAO")
    print("=" * 60)
    
    # Test database connection
    result = test_database_connection()
    if not result:
        print("\nüí° H∆∞·ªõng d·∫´n:")
        print("1. T·∫°o file .env trong th∆∞ m·ª•c PyCharmMiscProject")
        print("2. Th√™m d√≤ng: DATABASE_URL=postgresql://user:pass@host:port/dbname")
        print("3. Thay th·∫ø user, pass, host, port, dbname b·∫±ng th√¥ng tin th·ª±c t·∫ø")
        return
    
    conn, cursor = result
    
    try:
        # List all junctions
        list_junctions(conn, cursor)
        
        # Check schedules
        check_schedules(conn, cursor)
        
        # Check traffic patterns
        check_traffic_patterns(conn, cursor)
        
        # Check traffic lights
        check_traffic_lights(conn, cursor)
        
        # H·ªèi c√≥ mu·ªën test mapping kh√¥ng
        print("\n" + "="*60)
        test_mapping = input("B·∫°n c√≥ mu·ªën test phase mapping cho m·ªôt junction c·ª• th·ªÉ? (y/n): ").strip().lower()
        if test_mapping == 'y' or test_mapping == 'yes':
            test_phase_mapping(conn, cursor)
        
    finally:
        cursor.close()
        conn.close()
        print("\n‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

if __name__ == "__main__":
    main() 