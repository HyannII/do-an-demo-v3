generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Camera {
  cameraId         String        @id @default(uuid())
  cameraName       String
  ipAddress        String
  location         String
  latitude         Decimal?      @db.Decimal(10, 6)
  longitude        Decimal?      @db.Decimal(10, 6)
  model            String?
  manufacturer     String?
  installationDate DateTime?
  isActive         Boolean       @default(true)
  junctionId       String?
  junction         Junction?     @relation(fields: [junctionId], references: [junctionId])
  trafficData      TrafficData[]
}

model Junction {
  junctionId      String           @id @default(uuid())
  junctionName    String
  location        String
  latitude        Decimal?         @db.Decimal(10, 6)
  longitude       Decimal?         @db.Decimal(10, 6)
  description     String?
  cameras         Camera[]
  trafficLights   TrafficLight[]
  trafficPatterns TrafficPattern[]
  vmss            VMS[]            // Quan hệ với VMS
}

model Notification {
  notificationId   String   @id @default(uuid())
  notificationType String
  message          String
  createdAt        DateTime @default(now())
  isRead           Boolean  @default(false)
  userId           String
  user             User     @relation(fields: [userId], references: [userId])
}

model Role {
  roleId      String  @id @default(uuid())
  roleName    String  @unique
  description String?
  permissions Json?
  users       User[]
}

model SystemLog {
  logId       String   @id @default(uuid())
  logTime     DateTime @default(now())
  eventType   String
  description String
  userId      String?
  ipAddress   String?
  user        User?    @relation(fields: [userId], references: [userId])
}

model TrafficData {
  dataId          String   @id @default(uuid())
  cameraId        String
  captureTime     DateTime @default(now())
  vehicleCount    Int?
  pedestrianCount Int?
  averageSpeed    Decimal? @db.Decimal(5, 2)
  trafficDensity  String?
  rawData         Json?
  camera          Camera   @relation(fields: [cameraId], references: [cameraId])
}

model TrafficLight {
  trafficLightId   String            @id @default(uuid())
  lightName        String
  ipAddress        String
  location         String
  latitude         Decimal?          @db.Decimal(10, 6)
  longitude        Decimal?          @db.Decimal(10, 6)
  junctionId       String
  status           String
  lastMaintenance  DateTime?
  isActive         Boolean           @default(true)
  junction         Junction          @relation(fields: [junctionId], references: [junctionId])
  trafficLightLogs TrafficLightLog[]
}

model TrafficLightLog {
  logId             String       @id @default(uuid())
  trafficLightId    String
  changeTime        DateTime     @default(now())
  previousStatus    String
  newStatus         String
  changeReason      String?
  triggeredByUserId String?
  trafficLight      TrafficLight @relation(fields: [trafficLightId], references: [trafficLightId])
  user              User?        @relation(fields: [triggeredByUserId], references: [userId])
}

model TrafficPattern {
  patternId           String   @id @default(uuid())
  junctionId          String
  patternName         String
  description         String?
  timingConfiguration Json
  createdAt           DateTime @default(now())
  createdByUserId     String
  user                User     @relation(fields: [createdByUserId], references: [userId])
  junction            Junction @relation(fields: [junctionId], references: [junctionId])
}

model User {
  userId           String            @id @default(uuid())
  username         String            @unique
  passwordHash     String
  email            String
  fullName         String
  roleId           String
  createdAt        DateTime          @default(now())
  lastLogin        DateTime?
  isActive         Boolean           @default(true)
  notifications    Notification[]
  systemLogs       SystemLog[]
  trafficLightLogs TrafficLightLog[]
  trafficPatterns  TrafficPattern[]
  role             Role              @relation(fields: [roleId], references: [roleId])
  uploadedMedias   Media[]           // Quan hệ với Media (media do user upload)
  mediaLogs        MediaLog[]        // Quan hệ với MediaLog (hành động của user trên media)
  vmsLogs          VMSLog[]          // Quan hệ với VMSLog (hành động của user trên VMS)
}

model VMS {
  vmsId            String    @id @default(uuid())
  vmsName          String
  ipAddress        String
  location         String
  latitude         Decimal?  @db.Decimal(10, 6)
  longitude        Decimal?  @db.Decimal(10, 6)
  message          String?   // Thông báo hiện tại hiển thị trên VMS (có thể bỏ nếu dùng Media)
  status           String    @default("operational") // "operational", "maintenance", "offline"
  installationDate DateTime?
  lastUpdate       DateTime? @default(now())
  isActive         Boolean   @default(true)
  junctionId       String?
  junction         Junction? @relation(fields: [junctionId], references: [junctionId])
  vmsLogs          VMSLog[]  // Quan hệ với bảng log
  medias           Media[]   // Quan hệ với bảng Media để lưu media liên quan
}

model VMSLog {
  logId             String   @id @default(uuid())
  vmsId             String
  changeTime        DateTime @default(now())
  previousMessage   String?
  newMessage        String?
  changeReason      String?
  triggeredByUserId String?
  vms               VMS      @relation(fields: [vmsId], references: [vmsId])
  user              User?    @relation(fields: [triggeredByUserId], references: [userId])
}

model Media {
  mediaId          String     @id @default(uuid())
  mediaName        String     // Tên của media
  mediaType        String     // Loại media: "image", "video", "text", "unknown"
  size             Decimal?   @db.Decimal(10, 2) // Kích thước file (MB)
  ossDir           String?    // Đường dẫn lưu trữ trên OSS
  thumbnailUrl     String?    // Đường dẫn thumbnail nhỏ
  bigThumbnailUrl  String?    // Đường dẫn thumbnail lớn
  defaultImageUrl  String?    // Đường dẫn ảnh mặc định
  version          String?    // Phiên bản của media
  uploadPath       String?    // Đường dẫn upload (key)
  uniqueId         String?    // ID duy nhất của media
  duration         String?    // Thời lượng (đối với video, định dạng "HH:MM:SS.sss")
  status           String     @default("pending") // Trạng thái: "pending", "uploaded", "failed", "deleted"
  content          String?    // Nội dung text (nếu mediaType là "text")
  createdAt        DateTime   @default(now())     // Thời gian tạo
  lastUpdatedAt    DateTime?  @updatedAt          // Thời gian cập nhật cuối cùng
  uploadedByUserId String?    // ID người upload
  user             User?      @relation(fields: [uploadedByUserId], references: [userId])
  vmsId            String?    // Liên kết với VMS
  vms              VMS?       @relation(fields: [vmsId], references: [vmsId])
  mediaLogs        MediaLog[] // Lịch sử thao tác với media
}

model MediaLog {
  logId             String   @id @default(uuid())
  mediaId           String   // ID của media liên quan
  action            String   // Hành động: "created", "uploaded", "deleted", "updated"
  actionTime        DateTime @default(now()) // Thời gian thực hiện hành động
  details           Json?    // Chi tiết hành động (ví dụ: thông tin OSS, lỗi nếu có)
  triggeredByUserId String?  // ID người thực hiện hành động
  media             Media    @relation(fields: [mediaId], references: [mediaId])
  user              User?    @relation(fields: [triggeredByUserId], references: [userId])
}