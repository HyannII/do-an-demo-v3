generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Camera {
  cameraId      String         @id @default(uuid())
  cameraName    String
  cameraAddress String
  location      String
  latitude      Decimal?       @db.Decimal(10, 6)
  longitude     Decimal?       @db.Decimal(10, 6)
  isActive      Boolean        @default(true)
  junctionId    String?
  junction      Junction?      @relation(fields: [junctionId], references: [junctionId])
  cameraData    CameraData[]   // Quan hệ 1-nhiều với CameraData
}

model CameraData {
  dataId        String   @id @default(uuid())
  cameraId      String
  timestamp     DateTime
  motorcycleCount Int    // Số lượng xe máy
  carCount      Int    // Số lượng xe con
  truckCount    Int    // Số lượng xe tải
  busCount      Int    // Số lượng xe khách
  camera        Camera @relation(fields: [cameraId], references: [cameraId])
}

model Junction {
  junctionId      String           @id @default(uuid())
  junctionName    String
  location        String
  latitude        Decimal?         @db.Decimal(10, 6)
  longitude       Decimal?         @db.Decimal(10, 6)
  cameras         Camera[]
  trafficLights   TrafficLight[]
  trafficPatterns TrafficPattern[]
}

model Role {
  roleId      String @id @default(uuid())
  roleName    String @unique
  permissions Json?
  users       User[]
}

model TrafficLight {
  trafficLightId String   @id @default(uuid())
  lightName      String
  ipAddress      String
  location       String
  latitude       Decimal? @db.Decimal(10, 6)
  longitude      Decimal? @db.Decimal(10, 6)
  junctionId     String
  status         String
  isActive       Boolean  @default(true)
  junction       Junction @relation(fields: [junctionId], references: [junctionId])
}

model TrafficPattern {
  patternId           String   @id @default(uuid())
  junctionId          String
  patternName         String
  timingConfiguration Json
  createdAt           DateTime @default(now())
  createdByUserId     String
  user                User     @relation(fields: [createdByUserId], references: [userId])
  junction            Junction @relation(fields: [junctionId], references: [junctionId])
}

model User {
  userId          String           @id @default(uuid())
  username        String           @unique
  passwordHash    String
  email           String
  fullName        String
  roleId          String
  createdAt       DateTime         @default(now())
  isActive        Boolean          @default(true)
  trafficPatterns TrafficPattern[]
  role            Role             @relation(fields: [roleId], references: [roleId])
}