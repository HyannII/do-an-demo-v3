generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Camera {
  cameraId         Int           @id @default(autoincrement())
  cameraName       String
  ipAddress        String
  location         String
  latitude         Decimal?      @db.Decimal(10, 6)
  longitude        Decimal?      @db.Decimal(10, 6)
  model            String?
  manufacturer     String?
  installationDate DateTime?
  isActive         Boolean       @default(true)
  junctionId       Int?
  junction         Junction?     @relation(fields: [junctionId], references: [junctionId])
  trafficData      TrafficData[]
}

model Junction {
  junctionId      Int              @id @default(autoincrement())
  junctionName    String
  location        String
  latitude        Decimal?         @db.Decimal(10, 6)
  longitude       Decimal?         @db.Decimal(10, 6)
  description     String?
  cameras         Camera[]
  trafficLights   TrafficLight[]
  trafficPatterns TrafficPattern[]
  vmss            VMS[]            // Quan hệ với VMS
}

model Notification {
  notificationId   Int      @id @default(autoincrement())
  notificationType String
  message          String
  createdAt        DateTime @default(now())
  isRead           Boolean  @default(false)
  userId           Int
  user             User     @relation(fields: [userId], references: [userId])
}

model Role {
  roleId      Int     @id @default(autoincrement())
  roleName    String  @unique
  description String?
  permissions Json?
  users       User[]
}

model SystemLog {
  logId       Int      @id @default(autoincrement())
  logTime     DateTime @default(now())
  eventType   String
  description String
  userId      Int?
  ipAddress   String?
  user        User?    @relation(fields: [userId], references: [userId])
}

model TrafficData {
  dataId          Int      @id @default(autoincrement())
  cameraId        Int
  captureTime     DateTime @default(now())
  vehicleCount    Int?
  pedestrianCount Int?
  averageSpeed    Decimal? @db.Decimal(5, 2)
  trafficDensity  String?
  rawData         Json?
  camera          Camera   @relation(fields: [cameraId], references: [cameraId])
}

model TrafficLight {
  trafficLightId  Int               @id @default(autoincrement())
  lightName       String
  ipAddress       String
  location        String
  latitude        Decimal?          @db.Decimal(10, 6)
  longitude       Decimal?          @db.Decimal(10, 6)
  junctionId      Int
  status          String
  lastMaintenance DateTime?
  isActive        Boolean           @default(true)
  junction        Junction          @relation(fields: [junctionId], references: [junctionId])
  trafficLightLogs TrafficLightLog[]
}

model TrafficLightLog {
  logId              Int          @id @default(autoincrement())
  trafficLightId     Int
  changeTime         DateTime     @default(now())
  previousStatus     String
  newStatus          String
  changeReason       String?
  triggeredByUserId  Int?
  trafficLight       TrafficLight @relation(fields: [trafficLightId], references: [trafficLightId])
  user               User?        @relation(fields: [triggeredByUserId], references: [userId])
}

model TrafficPattern {
  patternId           Int      @id @default(autoincrement())
  junctionId          Int
  patternName         String
  description         String?
  timingConfiguration Json
  createdAt           DateTime @default(now())
  createdByUserId     Int
  user                User     @relation(fields: [createdByUserId], references: [userId])
  junction            Junction @relation(fields: [junctionId], references: [junctionId])
}

model User {
  userId           Int               @id @default(autoincrement())
  username         String            @unique
  passwordHash     String
  email            String
  fullName         String
  roleId           Int
  createdAt        DateTime          @default(now())
  lastLogin        DateTime?
  isActive         Boolean           @default(true)
  notifications    Notification[]
  systemLogs       SystemLog[]
  trafficLightLogs TrafficLightLog[]
  trafficPatterns  TrafficPattern[]
  role             Role              @relation(fields: [roleId], references: [roleId])
  uploadedMedias   Media[]           // Quan hệ với Media (media do user upload)
  mediaLogs        MediaLog[]        // Quan hệ với MediaLog (hành động của user trên media)
  vmsLogs          VMSLog[]          // Quan hệ với VMSLog (hành động của user trên VMS)
}

model VMS {
  vmsId           Int           @id @default(autoincrement())
  vmsName         String
  ipAddress       String
  location        String
  latitude        Decimal?      @db.Decimal(10, 6)
  longitude       Decimal?      @db.Decimal(10, 6)
  message         String?       // Thông báo hiện tại hiển thị trên VMS (có thể bỏ nếu dùng Media)
  status          String        @default("operational") // "operational", "maintenance", "offline"
  installationDate DateTime?
  lastUpdate      DateTime?     @default(now())
  isActive        Boolean       @default(true)
  junctionId      Int?
  junction        Junction?     @relation(fields: [junctionId], references: [junctionId])
  vmsLogs         VMSLog[]      // Quan hệ với bảng log
  medias          Media[]       // Quan hệ với bảng Media để lưu media liên quan
}

model VMSLog {
  logId             Int      @id @default(autoincrement())
  vmsId             Int
  changeTime        DateTime @default(now())
  previousMessage   String?
  newMessage        String?
  changeReason      String?
  triggeredByUserId Int?
  vms               VMS      @relation(fields: [vmsId], references: [vmsId])
  user              User?    @relation(fields: [triggeredByUserId], references: [userId])
}

model Media {
  mediaId          Int           @id @default(autoincrement())
  mediaName        String        // Tên của media
  mediaType        String        // Loại media: "image", "video", "text", "unknown"
  size             Decimal?      @db.Decimal(10, 2) // Kích thước file (MB)
  ossDir           String?       // Đường dẫn lưu trữ trên OSS
  thumbnailUrl     String?       // Đường dẫn thumbnail nhỏ
  bigThumbnailUrl  String?       // Đường dẫn thumbnail lớn
  defaultImageUrl  String?       // Đường dẫn ảnh mặc định
  version          String?       // Phiên bản của media
  uploadPath       String?       // Đường dẫn upload (key)
  uniqueId         String?       // ID duy nhất của media
  duration         String?       // Thời lượng (đối với video, định dạng "HH:MM:SS.sss")
  status           String        @default("pending") // Trạng thái: "pending", "uploaded", "failed", "deleted"
  content          String?       // Nội dung text (nếu mediaType là "text")
  createdAt        DateTime      @default(now()) // Thời gian tạo
  lastUpdatedAt    DateTime?     @updatedAt // Thời gian cập nhật cuối cùng
  uploadedByUserId Int?          // ID người upload
  user             User?         @relation(fields: [uploadedByUserId], references: [userId])
  vmsId            Int?          // Liên kết với VMS
  vms              VMS?          @relation(fields: [vmsId], references: [vmsId])
  mediaLogs        MediaLog[]    // Lịch sử thao tác với media
}

model MediaLog {
  logId             Int      @id @default(autoincrement())
  mediaId           Int      // ID của media liên quan
  action            String   // Hành động: "created", "uploaded", "deleted", "updated"
  actionTime        DateTime @default(now()) // Thời gian thực hiện hành động
  details           Json?    // Chi tiết hành động (ví dụ: thông tin OSS, lỗi nếu có)
  triggeredByUserId Int?     // ID người thực hiện hành động
  media             Media    @relation(fields: [mediaId], references: [mediaId])
  user              User?    @relation(fields: [triggeredByUserId], references: [userId])
}